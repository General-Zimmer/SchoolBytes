@model List<SchoolBytes.Models.Course>

<h1>@ViewBag.Title</h1>
<br />
<!-- Course Dropdown Form -->

<select name="selectedCourseId" id="courseDropdown" onchange="populateCourseModules()">
    <option value="">-- Select a course --</option>
    @foreach (var course in Model)
    {
        <option value="@course.Id">@course.Name</option>
    }
</select>


<!-- CourseModules Dropdown -->
<label for="moduleDropdown">Select a module:</label>
<select id="moduleDropdown" name="selectedModuleId">
    <option value="">-- Select a module --</option>
</select>

<noscript>
    <button type="submit">Submit</button>
</noscript>

<!-- Tlf. form -->
<form method="post" action="/YourController/YourAction">
    <label for="inputField">Enter tlf. nr:</label>
    <input type="text" id="inputField" name="inputField" placeholder="88888888">
    <button type="submit">Tjek Ind</button>
</form>

<!-- JavaScript Code -->
@using Newtonsoft;
<script>
    // Serialize course data to a JavaScript object
    const courses = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

    // Function to populate the modules dropdown based on selected course
    function populateCourseModules() {
        console.log(courses);
        const courseDropdown = document.getElementById("courseDropdown");
        const moduleDropdown = document.getElementById("moduleDropdown");
        const selectedCourseId = parseInt(courseDropdown.value);
        console.log(selectedCourseId);
        // Clear the existing modules
        moduleDropdown.innerHTML = '<option value="">-- Select a module --</option>';

        // Find the selected course and populate modules if it exists
        const selectedCourse = courses.find(course => course.Id === selectedCourseId);
        // Todays date
        const today = new Date();
        const todayFormatted = today.toISOString().split('T')[0]; // Get only yyyy-mm-dd
        console.log(selectedCourse.CoursesModules[0].Date);
        if (selectedCourse && selectedCourse.CoursesModules.length > 0) {
            selectedCourse.CoursesModules.filter(module => {
                // Convert module.Date to a string format (yyyy-mm-dd)
                const moduleDateFormatted = new Date(module.Date).toISOString().split('T')[0];
                return moduleDateFormatted === todayFormatted;
            }).forEach(module => {
                const option = document.createElement("option");
                option.value = module.Id;
                option.textContent = module.Name;
                moduleDropdown.appendChild(option);
            });
        }
    }
</script>